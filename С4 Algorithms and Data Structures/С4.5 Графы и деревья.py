# G = {"Лиговский проспект": ["Площадь Александра Невского 2"],
#      "Площадь Александра Невского 2": ["Площадь Александра Невского 1", "Лиговский проспект", "Новочеркасская"],
#      "Площадь Александра Невского 1": ["Площадь Александра Невского 2", "Елизаровская"],
#      "Новочеркасская": ["Площадь Александра Невского 2", "Ладожская"],
#      "Ладожская": ["Новочеркасская", "Проспект Большевиков"],
#      "Проспект Большевиков": ["Ладожская", "Дыбенко"],
#      "Дыбенко": ["Проспект Большевиков"]}
#
# # граф (словарь-список)
# G = {"Адмиралтейская": ["Садовая"],
#      "Садовая": ["Адмиралтейская", "Сенная площадь", "Спасская", "Звенигородская"],
#      "Сенная площадь": ["Садовая", "Спасская"],
#      "Спасская": ["Садовая", "Сенная площадь", "Достоевская"],
#      "Достоевская": ["Владимирская", "Спасская"],
#      "Пушкинская": ["Владимирская", "Звенигородская"],
#      "Звенигородская": ["Пушкинская", "Садовая"],
#      "Владимирская": ["Достоевская", "Пушкинская"]}
#
# G = {
#     0: {1: 1, 2: 1, 3: 1},
#     1: {0: 1, 2: 1},
#     2: {0: 1, 1: 1},
#     3: {0: 1}
# }
# взвешенный граф (словарь-словарь)
# G = {"Адмиралтейская": {"Садовая": 4},
#      "Садовая": {"Сенная площадь": 3, "Спасская": 3, "Адмиралтейская": 4, "Звенигородская": 5},
#      "Сенная площадь": {"Садовая": 3, "Спасская": 3}, "Спасская": {"Садовая": 3, "Сенная площадь": 3, "Достоевская": 4},
#      "Звенигородская": {"Пушкинская": 3, "Садовая": 5},
#      "Пушкинская": {"Звенигородская": 3, "Владимирская": 4},
#      "Владимирская": {"Достоевская": 3, "Пушкинская": 4},
#      "Достоевская": {"Владимирская": 3, "Спасская": 4}}
# D = {k: 100 for k in G.keys()}
# print(D)
# U = {k: False for k in G.keys()}
# print((U))

G = {"Адмиралтейская" :
         {"Садовая" : 4},
     "Садовая" :
         {"Сенная площадь" : 3,
          "Спасская" : 3,
          "Адмиралтейская" : 4,
          "Звенигородская" : 5},
     "Сенная площадь" :
         {"Садовая" : 3,
          "Спасская" : 3},
     "Спасская" :
         {"Садовая" : 3,
          "Сенная площадь" : 3,
          "Достоевская" : 4},
     "Звенигородская" :
         {"Пушкинская" : 3,
          "Садовая" : 5},
     "Пушкинская" :
         {"Звенигородская" : 3,
          "Владимирская" : 4},
     "Владимирская" :
         {"Достоевская" : 3,
          "Пушкинская" : 4},
     "Достоевская" :
         {"Владимирская" : 3,
          "Спасская" : 4}}

D = {k: 100 for k in G.keys()}
start_k = 'Адмиралтейская'  # стартовая вершина
D[start_k] = 0  # расстояние от нее до самой себя равно нулю
U = {k: False for k in G.keys()}  # флаги непросмотренных вершин
P = {k: None for k in G.keys()}  # предки

for _ in range(len(D)):
    # выбираем среди непросмотренных наименьшее по расстоянию
    min_k = min([k for k in U.keys() if not U[k]], key=lambda x: D[x])

    for v in G[min_k].keys():  # проходимся по всем смежным вершинам
        if D[v] > D[min_k] + G[min_k][v]:
            D[v] = D[min_k] + G[min_k][v]
            P[v] = min_k
    U[min_k] = True  # просмотренную вершину помечаем

print(P)

pointer = "Владимирская"
while pointer is not None:
    print(pointer)
    pointer = P[pointer]
